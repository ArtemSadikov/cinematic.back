package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"errors"

	"cinematic.back/api/users/pb"
	userLoader "cinematic.back/services/gateway/internal/api/graphql/loaders/user"
	"cinematic.back/services/gateway/internal/api/graphql/model"
)

// EditProfile is the resolver for the editProfile field.
func (r *mutationResolver) EditProfile(ctx context.Context, input model.EditProfileInput) (*model.EditProfileResponse, error) {
	usr, _ := r.uService.FromIncomingCtx(ctx)
	req := &pb.UpdateUserByIdRequest{
		Id: usr.Id.String(),
		Data: &pb.UserWrite{
			Email:    input.Profile.Email,
			Username: input.Profile.Username,
		},
	}

	res, err := r.uClient.EditUserProfileById(ctx, req)
	if err != nil {
		return nil, err
	}

	resp := &model.EditProfileResponse{User: userLoader.TransformUser(res.User)}

	return resp, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	usr, ok := r.uService.FromIncomingCtx(ctx)
	if !ok {
		return nil, errors.New("no userLoader")
	}

	res := &model.User{
		ID: usr.Id.String(),
		Profile: &model.UserProfile{
			Email:    usr.Profile.Email,
			Username: usr.Profile.Username,
		},
		CreatedAt: usr.CreatedAt,
		UpdatedAt: usr.UpdatedAt,
		DeletedAt: usr.DeletedAt,
	}

	return res, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return userLoader.FromIncomingCtx(ctx).GetUser(ctx, id)
}
