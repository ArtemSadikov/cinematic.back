package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"cinematic.back/api/users/pb"
	"cinematic.back/services/gateway/internal/api/graphql/mappers/auth"
	"cinematic.back/services/gateway/internal/api/graphql/model"
	"context"
)

// AuthByCredentials is the resolver for the authByCredentials field.
func (r *mutationResolver) AuthByCredentials(ctx context.Context, input model.AuthByCredentialsInput) (*model.TokensResponse, error) {
	req := &pb.AuthByCredentialsRequest{Credentials: &pb.UserCredentials{
		Email:    input.Email,
		Password: input.Password,
	}}

	res, err := r.uClient.AuthByCredentials(ctx, req)
	if err != nil {
		return nil, err
	}

	return auth.MakeTokens(res.Tokens), nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterRequestInput) (*model.TokensResponse, error) {
	req := &pb.RegisterRequest{
		Credentials: &pb.UserCredentials{
			Email:    input.Email,
			Password: input.Password,
		},
		Username: input.Username,
	}
	res, err := r.uClient.Register(ctx, req)
	if err != nil {
		return nil, err
	}

	return auth.MakeTokens(res.Tokens), nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, refreshToken string) (*model.TokensResponse, error) {
	req := &pb.RefreshTokenRequest{RefreshToken: refreshToken}
	res, err := r.uClient.RefreshToken(ctx, req)
	if err != nil {
		return nil, err
	}

	return auth.MakeTokens(res.Tokens), nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, password string) (*model.TokensResponse, error) {
	usr, _ := r.uService.FromIncomingCtx(ctx)
	req := &pb.ChangePasswordRequest{
		UserId:   usr.Id.String(),
		Password: password,
	}

	res, err := r.uClient.ChangePassword(ctx, req)
	if err != nil {
		return nil, err
	}

	return auth.MakeTokens(res.Tokens), nil
}
